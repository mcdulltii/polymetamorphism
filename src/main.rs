#![allow(warnings)]
#![feature(asm)]

use std::arch::asm;
use std::env;
use std::ptr::{copy, read_volatile};
use std::mem::transmute;

use nix::unistd::{fork, ForkResult};
use mmap::{MapOption, MemoryMap};

// modules
mod quotes;
mod metamorphic;
mod polymorphic;

// key section
#[link_section = ".nsp0"]
#[used]
static mut nsp0: [u8; 32] = [0; 32];

// nonce section
#[link_section = ".nsp1"]
#[used]
static mut nsp1: [u8; 12] = [0; 12];

// First run bool
#[link_section = ".lbss"]
#[used]
static mut lbss: u8 = 0;

// Payload function section
#[link_section = ".hash"]
#[used]
static hash: [u8; polymorphic::CRYPTED_FUNC_SIZE] = *b"\x48\x81\xec\x20\x01\x00\x00\x48\xb8\x49\x74\x27\x73\x20\x4d\x6f\x72\x48\xba\x62\x69\x6e\x20\x54\x69\x6d\x65\x48\x89\x45\xd0\x48\x89\x55\xd8\x66\xc7\x45\xe0\x21\x0a\xc7\x45\xfc\x12\x00\x00\x00\x48\xb8\x52\x65\x6a\x6f\x69\x63\x65\x2c\x48\xba\x20\x6d\x79\x20\x66\x65\x6c\x6c\x48\x89\x45\xb0\x48\x89\x55\xb8\x48\xb8\x6f\x77\x20\x4d\x6f\x72\x62\x73\x48\x89\x45\xc0\xc6\x45\xc8\x0a\xc7\x45\xf8\x19\x00\x00\x00\x48\xb8\x54\x69\x6d\x65\x20\x74\x6f\x20\x48\xba\x67\x65\x74\x20\x4d\x6f\x72\x62\x48\x89\x45\x90\x48\x89\x55\x98\xc7\x45\xa0\x65\x64\x2c\x20\xc7\x45\xf4\x14\x00\x00\x00\x48\xb8\x54\x49\x53\x43\x7b\x74\x68\x31\x48\xba\x73\x5f\x31\x73\x5f\x6e\x30\x74\x48\x89\x85\x60\xff\xff\xff\x48\x89\x95\x68\xff\xff\xff\x48\xb8\x5f\x74\x68\x33\x5f\x61\x63\x37\x48\xba\x75\x34\x6c\x5f\x66\x6c\x34\x67\x48\x89\x85\x70\xff\xff\xff\x48\x89\x95\x78\xff\xff\xff\xc7\x45\x80\x5f\x6c\x4d\x34\x66\xc7\x45\x84\x30\x7d\xc7\x45\xf0\x26\x00\x00\x00\xc7\x45\xec\x2d\x00\x00\x00\x48\xb8\x63\x74\x78\xa5\x8c\xa6\x56\x7e\x48\xba\xd3\xff\x7b\xf4\x90\x40\x2e\x42\x48\x89\x85\x30\xff\xff\xff\x48\x89\x95\x38\xff\xff\xff\x48\xb8\x25\x7a\x49\xbd\x65\x52\x1f\x0b\x48\xba\x20\xd4\xc3\xa6\x70\xaa\x12\x0e\x48\x89\x85\x40\xff\xff\xff\x48\x89\x95\x48\xff\xff\xff\x48\xb8\x6a\xb7\x6b\x72\xab\xc7\x05\x19\x48\xba\x25\x93\xad\x9b\xa1\x4c\x8a\x10\x48\x89\x85\x50\xff\xff\xff\x48\x89\x95\x58\xff\xff\xff\xc7\x45\xe8\x30\x00\x00\x00\x8b\x45\xfc\x89\xc2\x48\x8d\x75\xd0\xe8\x11\x02\x00\x00\x48\xc7\xc0\x0a\x00\x00\x00\x48\xc7\xc7\x00\x00\x20\x00\x48\xc7\xc6\x00\x10\x00\x00\x48\xc7\xc2\x01\x00\x00\x00\x48\x83\xca\x02\x0f\x05\x48\xc7\xc2\x32\x00\x00\x00\x48\x8d\xb5\xf0\xfe\xff\xff\x48\xc7\xc7\x02\x00\x00\x00\x48\x31\xc0\x0f\x05\x48\x85\xc0\x7e\x29\x8b\x45\xf0\x83\xc0\x01\x89\xc1\x48\x8d\xb5\x60\xff\xff\xff\x48\x8d\xbd\xf0\xfe\xff\xff\xfc\xf3\xa6\xe3\x1e\x8b\x45\xf8\x89\xc2\x48\x8d\x75\xb0\xe8\xa7\x01\x00\x00\x48\xc7\xc7\x00\x00\x00\x00\x48\xc7\xc0\x3c\x00\x00\x00\x0f\x05\x8b\x45\xec\x83\xe8\x02\x48\x98\x0f\xb6\x84\x05\xf0\xfe\xff\xff\x0f\xbe\xc0\xc1\xe0\x08\x89\xc2\x0f\xb6\x85\xff\xfe\xff\xff\x0f\xbe\xc0\x09\xd0\x89\x85\xe0\xfe\xff\xff\x8b\x45\xec\x83\xe8\x04\x48\x98\x0f\xb6\x84\x05\xf0\xfe\xff\xff\x0f\xbe\xc0\xc1\xe0\x08\x89\xc2\x0f\xb6\x85\xfd\xfe\xff\xff\x0f\xbe\xc0\x09\xd0\x89\x85\xe4\xfe\xff\xff\x8b\x45\xec\x83\xe8\x05\x48\x98\x0f\xb6\x84\x05\xf0\xfe\xff\xff\x0f\xbe\xc0\xc1\xe0\x08\x89\xc2\x8b\x45\xec\x83\xe8\x02\x48\x98\x0f\xb6\x84\x05\xf0\xfe\xff\xff\x0f\xbe\xc0\x09\xd0\x89\x85\xe8\xfe\xff\xff\x8b\x45\xec\x83\xe8\x06\x48\x98\x0f\xb6\x84\x05\xf0\xfe\xff\xff\x0f\xbe\xc0\xc1\xe0\x08\x89\xc2\x8b\x45\xec\x83\xe8\x01\x48\x98\x0f\xb6\x84\x05\xf0\xfe\xff\xff\x0f\xbe\xc0\x09\xd0\x89\x85\xec\xfe\xff\xff\x48\x8d\x85\x30\xff\xff\xff\x48\x83\xc0\x10\x48\x8d\x95\xe0\xfe\xff\xff\x48\x89\xc6\xbf\x20\x00\x00\x00\xe8\xcf\x00\x00\x00\x48\x8d\x85\x30\xff\xff\xff\x48\x83\xc0\x08\x48\x8d\x95\xe0\xfe\xff\xff\x48\x89\xc6\xbf\x20\x00\x00\x00\xe8\xb0\x00\x00\x00\x48\x8d\x85\x30\xff\xff\xff\x48\x83\xc0\x28\x48\x8d\x95\xe0\xfe\xff\xff\x48\x89\xc6\xbf\x20\x00\x00\x00\xe8\x91\x00\x00\x00\x48\x8d\x85\x30\xff\xff\xff\x48\x83\xc0\x18\x48\x8d\x95\xe0\xfe\xff\xff\x48\x89\xc6\xbf\x20\x00\x00\x00\xe8\x72\x00\x00\x00\x48\x8d\x95\xe0\xfe\xff\xff\x48\x8d\x85\x30\xff\xff\xff\x48\x89\xc6\xbf\x20\x00\x00\x00\xe8\x57\x00\x00\x00\x48\x8d\x85\x30\xff\xff\xff\x48\x83\xc0\x20\x48\x8d\x95\xe0\xfe\xff\xff\x48\x89\xc6\xbf\x20\x00\x00\x00\xe8\x38\x00\x00\x00\x8b\x45\xf4\x89\xc2\x48\x8d\x75\x90\xe8\x19\x00\x00\x00\x8b\x45\xe8\x89\xc2\x48\x8d\xb5\x30\xff\xff\xff\xe8\x08\x00\x00\x00\xe9\x5c\xfe\xff\xff\x90\xc9\xc3\x48\xc7\xc7\x01\x00\x00\x00\x48\xc7\xc0\x01\x00\x00\x00\x0f\x05\xc3\x55\x48\x89\xe5\x89\x7d\xfc\x48\x89\x75\xf0\x48\x89\x55\xe8\x48\xbb\x89\x7d\xdc\x90\x90\x90\xeb\x22\xeb\xf6\x48\xbb\x89\x45\xf8\x90\x90\x90\xeb\x0c\x48\xbb\x8b\x40\x04\x89\x45\xf4\xeb\x28\x48\xbb\x48\x8b\x45\xd0\x90\x90\xeb\xee\x48\xbb\x48\x89\x75\xd0\x90\x90\xeb\x0c\x48\xbb\x48\x8b\x45\xd0\x8b\x00\xeb\xd0\x48\xbb\x48\x89\x55\xc8\x90\x90\xeb\xee\xc7\x45\xec\xb9\x79\x37\x9e\x48\xbb\x13\xeb\x0a\xd2\xd0\xfa\x67\x44\xeb\xf7\xe8\x48\xbb\x8b\x45\xec\x90\x90\x90\xeb\x02\x48\xbb\x0f\xaf\x45\xdc\x90\x90\xeb\x02\x48\xbb\x89\x45\xf0\x90\x90\x90\xeb\x00\xc7\x45\xfc\x00\x00\x00\x00\x48\xbb\x1e\xa6\x28\x7b\x3a\xeb\x04\xd2\xeb\xfb\xe8\xe9\xfe\x00\x00\x00\x48\xbb\x8b\x45\xf8\xc1\xe0\x04\xeb\x37\xeb\xf6\x48\xbb\x8b\x45\xf8\x8d\x0c\x02\xeb\x02\x48\xbb\x8b\x45\xf0\xc1\xe8\x0b\xeb\x02\x48\xbb\x89\xc0\x83\xe0\x03\x90\xeb\x00\x48\x8d\x14\x85\x00\x00\x00\x00\x48\xbb\x17\x99\x31\xa8\x39\x6a\xeb\x19\xeb\xfc\xe8\x48\xbb\x89\xc2\x8b\x45\xf8\x90\xeb\x02\x48\xbb\xc1\xe8\x05\x31\xc2\x90\xeb\xbb\x48\xbb\x48\x8b\x45\xc8\x90\x90\xeb\x0c\x48\xbb\x8b\x45\xec\x29\x45\xf0\xeb\x16\x48\xbb\x48\x01\xd0\x8b\x10\x90\xeb\x02\x48\xbb\x8b\x45\xf0\x01\xd0\x90\xeb\x16\x48\xbb\x8b\x45\xf4\xc1\xe0\x04\xeb\x02\x48\xbb\x89\xc2\x8b\x45\xf4\x90\xeb\x0c\x48\xbb\x31\xc8\x29\x45\xf4\x90\xeb\xc6\x48\xbb\xc1\xe8\x05\x31\xc2\x90\xeb\x3f\x48\xbb\x48\x01\xd0\x8b\x10\x90\xeb\x02\x48\xbb\x8b\x45\xf0\x01\xd0\x90\xeb\x35\x48\x8d\x14\x85\x00\x00\x00\x00\x48\xbb\xeb\x0b\x1f\x76\xeb\xfc\xf8\xe1\xeb\xf6\xe8\x48\xbb\x48\x8b\x45\xc8\x90\x90\xeb\xcf\x48\xbb\x8b\x45\xf0\x83\xe0\x03\xeb\xd7\x48\xbb\x8b\x45\xf4\x8d\x0c\x02\xeb\xee\x48\xbb\x31\xc8\x29\x45\xf8\x90\xeb\x02\x48\xbb\x83\x45\xfc\x01\x90\x90\xeb\x00\x48\xbb\x8b\x45\xfc\x3b\x45\xdc\xeb\x02\xeb\xf6\x0f\x82\xf0\xfe\xff\xff\x48\xbb\x48\x8b\x45\xd0\x90\x90\xeb\x04\xeb\xf6\x48\xbb\x8b\x55\xf8\x89\x10\x90\xeb\x16\x48\xbb\x48\x8d\x50\x04\x90\x90\xeb\x02\x48\xbb\x8b\x45\xf4\x89\x02\x90\xeb\x0c\x48\xbb\x48\x8b\x45\xd0\x90\x90\xeb\xe4\x48\xbb\x5d\xc3\x90\x90\x90\x90\xeb\x00\x90\x5d\xc3";

fn main() {
    let args: Vec<String> = env::args().collect(); metamorphic::junk!();
    let filename = &args[0];
    let mut code = Vec::new();

    // Read argv[0] into code variable
    metamorphic::read_binary_file(filename, &mut code).ok(); metamorphic::junk!();

    // Check for ASM locations and randomize junk bytes
    metamorphic::metamorph(&mut code); metamorphic::junk!();

    // Initialize linked sections
    let key = unsafe { read_volatile(&nsp0) }; metamorphic::junk!();
    let nonce = unsafe { read_volatile(&nsp1) }; metamorphic::junk!();
    let first = unsafe { read_volatile(&lbss) }; metamorphic::junk!();
    let func = unsafe { read_volatile(&hash) }; metamorphic::junk!();

    // Show random prompt
    quotes::print_prompt();

    // Decrypt payload function section
    let mut decrypted_func = polymorphic::decrypt_func(&mut code, key, nonce, first).ok().unwrap(); metamorphic::junk!();

    match unsafe { fork() } {
        Ok(ForkResult::Parent {..}) => {
            // Don't run payload in first run
            if first != 0 {
                unsafe {
                    // Create RWX memory region
                    let decrypted_func_map = MemoryMap::new(
                        decrypted_func.len(),
                        &[
                            MapOption::MapAddr(0 as *mut u8),
                            MapOption::MapOffset(0),
                            MapOption::MapFd(-1),
                            MapOption::MapReadable,
                            MapOption::MapWritable,
                            MapOption::MapExecutable,
                        ],
                    ).unwrap(); metamorphic::junk!();

                    // Copy decrypted payload function into memory region
                    copy(decrypted_func.as_ptr(), decrypted_func_map.data(), decrypted_func.len()); metamorphic::junk!();
                    let decrypted_func_ptr: extern "C" fn() -> ! = transmute(decrypted_func_map.data()); metamorphic::junk!();

                    // Run decrypted payload function
                    decrypted_func_ptr();
                }
            }
        }

        Ok(ForkResult::Child) => {
            // Re-encrypt payload function section with new random key
            polymorphic::encrypt_func(&mut code, &mut decrypted_func).ok(); metamorphic::junk!();

            // Rewrite binary file
            metamorphic::write_binary_file(filename, &mut code).ok();
        }

        Err(_) => {}
    }
}
